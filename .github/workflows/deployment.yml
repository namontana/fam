name: üöÄ Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mobile_app/montanagent/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      deploy_mobile:
        description: 'Deploy mobile apps to stores'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.35.4'
  WORKING_DIRECTORY: ./mobile_app/montanagent

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: üîç Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      target-env: ${{ steps.check.outputs.target-env }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üîç Run quick health checks
        id: check
        run: |
          # Check if app compiles
          flutter analyze --fatal-infos
          flutter test --run-skipped
          
          # Determine deployment target
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "target-env=none" >> $GITHUB_OUTPUT
          fi

  # Build for Web
  build-web:
    name: üåê Build Web Application
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üèóÔ∏è Build web application
        run: |
          flutter build web \
            --release \
            --web-renderer canvaskit \
            --dart-define=FLUTTER_WEB_USE_SKIA=true \
            --source-maps

      - name: üì§ Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: ${{ env.WORKING_DIRECTORY }}/build/web
          retention-days: 30

  # Build Android
  build-android:
    name: ü§ñ Build Android Application
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üèóÔ∏è Build Android APK
        run: flutter build apk --release --split-per-abi

      - name: üèóÔ∏è Build Android App Bundle
        run: flutter build appbundle --release

      - name: üì§ Upload Android builds
        uses: actions/upload-artifact@v4
        with:
          name: android-builds-${{ github.sha }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/build/app/outputs/flutter-apk/
            ${{ env.WORKING_DIRECTORY }}/build/app/outputs/bundle/release/
          retention-days: 30

  # Deploy to Firebase Hosting
  deploy-web:
    name: üåê Deploy Web to Firebase
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-web]
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.pre-deployment.outputs.target-env }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: ${{ env.WORKING_DIRECTORY }}/build/web

      - name: üöÄ Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: ${{ needs.pre-deployment.outputs.target-env == 'production' && secrets.FIREBASE_SERVICE_ACCOUNT_PROD || secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
          projectId: ${{ needs.pre-deployment.outputs.target-env == 'production' && secrets.FIREBASE_PROJECT_ID || format('{0}-staging', secrets.FIREBASE_PROJECT_ID) }}
          channelId: live
          entryPoint: ${{ env.WORKING_DIRECTORY }}

      - name: üîî Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: |
            üéâ Web deployment successful!
            Environment: ${{ needs.pre-deployment.outputs.target-env }}
            URL: ${{ steps.deploy.outputs.url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Google Play Store
  deploy-android:
    name: ü§ñ Deploy Android to Play Store
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-android]
    if: |
      needs.pre-deployment.outputs.should-deploy == 'true' && 
      needs.pre-deployment.outputs.target-env == 'production' &&
      github.event.inputs.deploy_mobile == 'true'
    environment:
      name: play-store
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download Android builds
        uses: actions/download-artifact@v4
        with:
          name: android-builds-${{ github.sha }}
          path: ./android-builds/

      - name: üîê Setup Play Store credentials
        run: |
          echo '${{ secrets.PLAY_STORE_SERVICE_ACCOUNT }}' > play-store-credentials.json

      - name: üöÄ Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT }}
          packageName: com.fam.montanagent
          releaseFiles: ./android-builds/bundle/release/app-release.aab
          track: production
          status: completed

  # Post-deployment validation
  validate-deployment:
    name: ‚úÖ Validate Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-web]
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üè• Health check web deployment
        run: |
          if [ "${{ needs.pre-deployment.outputs.target-env }}" == "production" ]; then
            URL="https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app"
          else
            URL="https://${{ secrets.FIREBASE_PROJECT_ID }}-staging.web.app"
          fi
          
          echo "Testing URL: $URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check if site is accessible
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Health check failed. HTTP code: $HTTP_CODE"
            exit 1
          fi
          
          echo "‚úÖ Health check passed"

      - name: üß™ Run smoke tests
        run: |
          # Add smoke tests here - check critical functionality
          echo "üß™ Running smoke tests..."
          # Example: Test that the app loads without errors
          # You could use tools like Puppeteer or Playwright here

      - name: üìä Performance audit
        run: |
          # You could integrate Lighthouse here for performance auditing
          echo "üìä Performance audit would run here"

  # Rollback capability
  rollback:
    name: ‚è™ Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && needs.pre-deployment.outputs.target-env == 'production'
    needs: [pre-deployment, deploy-web, validate-deployment]
    environment:
      name: production-rollback
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: ‚è™ Rollback Firebase Hosting
        run: |
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Rollback to previous version
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}' > firebase-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=firebase-key.json
          
          firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
          firebase hosting:releases:list --limit=2
          # Implement rollback logic here

      - name: üö® Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ö†Ô∏è Production deployment failed and rollback initiated!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}